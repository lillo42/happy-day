// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"fmt"
	"github.com/google/uuid"
	"github.com/google/wire"
	"github.com/spf13/viper"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/bsoncodec"
	"go.mongodb.org/mongo-driver/bson/bsonrw"
	"go.mongodb.org/mongo-driver/bson/bsontype"
	"go.mongodb.org/mongo-driver/mongo/options"
	"happyday/customer/apis"
	"happyday/customer/applications"
	"happyday/customer/infrastructure"
	apis2 "happyday/product/apis"
	applications2 "happyday/product/applications"
	infrastructure2 "happyday/product/infrastructure"
	"reflect"
)

// Injectors from wire.go:

func initializeCustomerController() apis.Controller {
	clientOptions := ProviderMongoDbOptions()
	mongoDbRepository := infrastructure.ProviderMongoDbRepository(clientOptions)
	createOperation := applications.ProvideCreateOperation(mongoDbRepository)
	changeOperation := applications.ProvideChangeOperation(mongoDbRepository)
	deleteOperation := applications.ProvideDeleteOperation(mongoDbRepository)
	controller := apis.ProviderController(createOperation, changeOperation, deleteOperation, mongoDbRepository)
	return controller
}

func initializeProductController() apis2.Controller {
	clientOptions := ProviderMongoDbOptions()
	mongoDbRepository := infrastructure2.ProviderMongoDbRepository(clientOptions)
	createOperation := applications2.ProviderCreateOperation(mongoDbRepository, mongoDbRepository)
	changeOperation := applications2.ProviderChangeOperation(mongoDbRepository, mongoDbRepository)
	deleteOperation := applications2.ProviderDeleteOperation(mongoDbRepository)
	controller := apis2.ProviderProductController(createOperation, changeOperation, deleteOperation, mongoDbRepository)
	return controller
}

// wire.go:

var (
	uuidType    = reflect.TypeOf(uuid.UUID{})
	uuidSubtype = byte(0x04)

	ProviderSet = wire.NewSet(
		ProviderMongoDbOptions, apis.ProviderSet, applications.ProviderSet, infrastructure.ProviderSet, apis2.ProviderSet, applications2.ProviderSet, infrastructure2.ProviderSet,
	)
)

func ProviderMongoDbOptions() *options.ClientOptions {
	connectionString := viper.GetString("connectingStrings.mongo")

	return options.Client().
		ApplyURI(connectionString).
		SetRegistry(bson.NewRegistryBuilder().
			RegisterTypeEncoder(uuidType, bsoncodec.ValueEncoderFunc(uuidEncodeValue)).
			RegisterTypeDecoder(uuidType, bsoncodec.ValueDecoderFunc(uuidDecodeValue)).
			Build())
}

func uuidEncodeValue(_ bsoncodec.EncodeContext, writer bsonrw.ValueWriter, value reflect.Value) error {
	if !value.IsValid() || value.Type() != uuidType {
		return bsoncodec.ValueEncoderError{
			Name:     "uuidEncodeValue",
			Types:    []reflect.Type{uuidType},
			Received: value,
		}
	}

	b := value.Interface().(uuid.UUID)
	return writer.WriteBinaryWithSubtype(b[:], uuidSubtype)
}

func uuidDecodeValue(_ bsoncodec.DecodeContext, reader bsonrw.ValueReader, value reflect.Value) error {
	if !value.CanSet() || value.Type() != uuidType {
		return bsoncodec.ValueDecoderError{
			Name:     "uuidDecodeValue",
			Types:    []reflect.Type{uuidType},
			Received: value,
		}
	}

	var data []byte
	var subtype byte
	var err error

	switch valueType := reader.Type(); valueType {
	case bsontype.Binary:
		data, subtype, err = reader.ReadBinary()
		if subtype != uuidSubtype {
			return fmt.Errorf("unsupported binary subtype %v for UUID", subtype)
		}
	case bsontype.Null:
		err = reader.ReadNull()
	case bsontype.Undefined:
		err = reader.ReadUndefined()
	default:
		return fmt.Errorf("cannot decode %v into a UUID", valueType)
	}

	if err != nil {
		return err
	}

	uuid2, err := uuid.FromBytes(data)
	if err != nil {
		return err
	}

	value.Set(reflect.ValueOf(uuid2))
	return nil
}
